# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Organization::Company`.
# Please instead update this file by running `bin/tapioca dsl Organization::Company`.


class Organization::Company
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), String]) }
    def legal_forms; end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(::Organization::Company)
    end
    def new(attributes = nil, &block); end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Organization::Company).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(::Organization::Company)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(T::Array[::Organization::Company])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(::Organization::Company)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::Organization::Company).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(::Organization::Company)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(T::Array[::Organization::Company])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(::Organization::Company)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(::Organization::Company)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(T::Array[::Organization::Company])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(::Organization::Company)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(T::Array[::Organization::Company])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(::Organization::Company)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(T::Array[::Organization::Company])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(::Organization::Company)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Organization::Company]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Organization::Company)) }
    def fifth; end

    sig { returns(::Organization::Company) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Organization::Company)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Organization::Company])
    end
    sig do
      params(
        args: NilClass,
        block: T.proc.params(object: ::Organization::Company).void
      ).returns(T.nilable(::Organization::Company))
    end
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Organization::Company)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Organization::Company) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Organization::Company).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Organization::Company])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Organization::Company]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Organization::Company]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(T::Array[::Organization::Company])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(::Organization::Company)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(T::Array[::Organization::Company])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(::Organization::Company)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(T::Array[::Organization::Company])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(::Organization::Company)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Organization::Company)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Organization::Company) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Organization::Company) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Organization::Company)) }
    sig { params(limit: Integer).returns(T::Array[::Organization::Company]) }
    def first(limit = nil); end

    sig { returns(::Organization::Company) }
    def first!; end

    sig { returns(T.nilable(::Organization::Company)) }
    def forty_two; end

    sig { returns(::Organization::Company) }
    def forty_two!; end

    sig { returns(T.nilable(::Organization::Company)) }
    def fourth; end

    sig { returns(::Organization::Company) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Organization::Company)) }
    sig { params(limit: Integer).returns(T::Array[::Organization::Company]) }
    def last(limit = nil); end

    sig { returns(::Organization::Company) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Organization::Company).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(::Organization::Company)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(T::Array[::Organization::Company])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization::Company).void)
      ).returns(::Organization::Company)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Organization::Company).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Organization::Company).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Organization::Company)) }
    def second; end

    sig { returns(::Organization::Company) }
    def second!; end

    sig { returns(T.nilable(::Organization::Company)) }
    def second_to_last; end

    sig { returns(::Organization::Company) }
    def second_to_last!; end

    sig { returns(::Organization::Company) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Organization::Company).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Organization::Company)) }
    sig { params(limit: Integer).returns(T::Array[::Organization::Company]) }
    def take(limit = nil); end

    sig { returns(::Organization::Company) }
    def take!; end

    sig { returns(T.nilable(::Organization::Company)) }
    def third; end

    sig { returns(::Organization::Company) }
    def third!; end

    sig { returns(T.nilable(::Organization::Company)) }
    def third_to_last; end

    sig { returns(::Organization::Company) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def auto_entrepreneur!; end

    sig { returns(T::Boolean) }
    def auto_entrepreneur?; end

    sig { void }
    def eurl!; end

    sig { returns(T::Boolean) }
    def eurl?; end

    sig { void }
    def sa!; end

    sig { returns(T::Boolean) }
    def sa?; end

    sig { void }
    def sas!; end

    sig { returns(T::Boolean) }
    def sas?; end

    sig { void }
    def sasu!; end

    sig { returns(T::Boolean) }
    def sasu?; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization::CompanyConfig) }
    def build_config(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def client_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def client_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization::Company` class because it declared `has_many :clients`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Organization::Client::PrivateCollectionProxy) }
    def clients; end

    sig { params(value: T::Enumerable[::Organization::Client]).void }
    def clients=(value); end

    sig { returns(T.nilable(::Organization::CompanyConfig)) }
    def config; end

    sig { params(value: T.nilable(::Organization::CompanyConfig)).void }
    def config=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization::CompanyConfig) }
    def create_config(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization::CompanyConfig) }
    def create_config!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def member_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def member_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization::Company` class because it declared `has_many :members`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Organization::Member::PrivateCollectionProxy) }
    def members; end

    sig { params(value: T::Enumerable[::Organization::Member]).void }
    def members=(value); end

    sig { returns(T.nilable(::Organization::CompanyConfig)) }
    def reload_config; end

    sig { void }
    def reset_config; end

    sig { returns(T::Array[T.untyped]) }
    def user_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization::Company` class because it declared `has_many :users, through: :members`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def users; end

    sig { params(value: T::Enumerable[::User]).void }
    def users=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def auto_entrepreneur(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eurl(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_auto_entrepreneur(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_eurl(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_sa(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_sas(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_sasu(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sa(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sas(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sasu(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig do
      params(
        blk: T.proc.params(record: ::Organization::Company).returns(BasicObject)
      ).returns(T::Array[::Organization::Company])
    end
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(::String) }
    def address_city; end

    sig { params(value: ::String).returns(::String) }
    def address_city=(value); end

    sig { returns(T::Boolean) }
    def address_city?; end

    sig { returns(T.nilable(::String)) }
    def address_city_before_last_save; end

    sig { returns(T.untyped) }
    def address_city_before_type_cast; end

    sig { returns(T::Boolean) }
    def address_city_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_city_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_city_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def address_city_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def address_city_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_city_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def address_city_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def address_city_previously_was; end

    sig { returns(T.nilable(::String)) }
    def address_city_was; end

    sig { void }
    def address_city_will_change!; end

    sig { returns(::String) }
    def address_street; end

    sig { params(value: ::String).returns(::String) }
    def address_street=(value); end

    sig { returns(T::Boolean) }
    def address_street?; end

    sig { returns(T.nilable(::String)) }
    def address_street_before_last_save; end

    sig { returns(T.untyped) }
    def address_street_before_type_cast; end

    sig { returns(T::Boolean) }
    def address_street_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_street_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_street_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def address_street_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def address_street_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_street_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def address_street_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def address_street_previously_was; end

    sig { returns(T.nilable(::String)) }
    def address_street_was; end

    sig { void }
    def address_street_will_change!; end

    sig { returns(::String) }
    def address_zipcode; end

    sig { params(value: ::String).returns(::String) }
    def address_zipcode=(value); end

    sig { returns(T::Boolean) }
    def address_zipcode?; end

    sig { returns(T.nilable(::String)) }
    def address_zipcode_before_last_save; end

    sig { returns(T.untyped) }
    def address_zipcode_before_type_cast; end

    sig { returns(T::Boolean) }
    def address_zipcode_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_zipcode_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_zipcode_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def address_zipcode_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def address_zipcode_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_zipcode_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def address_zipcode_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def address_zipcode_previously_was; end

    sig { returns(T.nilable(::String)) }
    def address_zipcode_was; end

    sig { void }
    def address_zipcode_will_change!; end

    sig { returns(::Integer) }
    def capital_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def capital_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def capital_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def capital_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def capital_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def capital_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def capital_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def capital_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def capital_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def capital_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def capital_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def capital_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def capital_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def capital_amount_cents_was; end

    sig { void }
    def capital_amount_cents_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::String) }
    def email; end

    sig { params(value: ::String).returns(::String) }
    def email=(value); end

    sig { returns(T::Boolean) }
    def email?; end

    sig { returns(T.nilable(::String)) }
    def email_before_last_save; end

    sig { returns(T.untyped) }
    def email_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def email_was; end

    sig { void }
    def email_will_change!; end

    sig { returns(::Integer) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(::Integer) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::String) }
    def legal_form; end

    sig { params(value: T.any(::String, ::Symbol)).returns(T.any(::String, ::Symbol)) }
    def legal_form=(value); end

    sig { returns(T::Boolean) }
    def legal_form?; end

    sig { returns(T.nilable(::String)) }
    def legal_form_before_last_save; end

    sig { returns(T.untyped) }
    def legal_form_before_type_cast; end

    sig { returns(T::Boolean) }
    def legal_form_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def legal_form_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def legal_form_change_to_be_saved; end

    sig { params(from: T.any(::String, ::Symbol), to: T.any(::String, ::Symbol)).returns(T::Boolean) }
    def legal_form_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def legal_form_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def legal_form_previous_change; end

    sig { params(from: T.any(::String, ::Symbol), to: T.any(::String, ::Symbol)).returns(T::Boolean) }
    def legal_form_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def legal_form_previously_was; end

    sig { returns(T.nilable(::String)) }
    def legal_form_was; end

    sig { void }
    def legal_form_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(::String) }
    def phone; end

    sig { params(value: ::String).returns(::String) }
    def phone=(value); end

    sig { returns(T::Boolean) }
    def phone?; end

    sig { returns(T.nilable(::String)) }
    def phone_before_last_save; end

    sig { returns(T.untyped) }
    def phone_before_type_cast; end

    sig { returns(T::Boolean) }
    def phone_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def phone_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def phone_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def phone_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def phone_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def phone_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def phone_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def phone_previously_was; end

    sig { returns(T.nilable(::String)) }
    def phone_was; end

    sig { void }
    def phone_will_change!; end

    sig { returns(::String) }
    def rcs_city; end

    sig { params(value: ::String).returns(::String) }
    def rcs_city=(value); end

    sig { returns(T::Boolean) }
    def rcs_city?; end

    sig { returns(T.nilable(::String)) }
    def rcs_city_before_last_save; end

    sig { returns(T.untyped) }
    def rcs_city_before_type_cast; end

    sig { returns(T::Boolean) }
    def rcs_city_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def rcs_city_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def rcs_city_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def rcs_city_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def rcs_city_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def rcs_city_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def rcs_city_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def rcs_city_previously_was; end

    sig { returns(T.nilable(::String)) }
    def rcs_city_was; end

    sig { void }
    def rcs_city_will_change!; end

    sig { returns(::String) }
    def rcs_number; end

    sig { params(value: ::String).returns(::String) }
    def rcs_number=(value); end

    sig { returns(T::Boolean) }
    def rcs_number?; end

    sig { returns(T.nilable(::String)) }
    def rcs_number_before_last_save; end

    sig { returns(T.untyped) }
    def rcs_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def rcs_number_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def rcs_number_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def rcs_number_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def rcs_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def rcs_number_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def rcs_number_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def rcs_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def rcs_number_previously_was; end

    sig { returns(T.nilable(::String)) }
    def rcs_number_was; end

    sig { void }
    def rcs_number_will_change!; end

    sig { returns(::String) }
    def registration_number; end

    sig { params(value: ::String).returns(::String) }
    def registration_number=(value); end

    sig { returns(T::Boolean) }
    def registration_number?; end

    sig { returns(T.nilable(::String)) }
    def registration_number_before_last_save; end

    sig { returns(T.untyped) }
    def registration_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def registration_number_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def registration_number_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def registration_number_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def registration_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def registration_number_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def registration_number_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def registration_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def registration_number_previously_was; end

    sig { returns(T.nilable(::String)) }
    def registration_number_was; end

    sig { void }
    def registration_number_will_change!; end

    sig { void }
    def restore_address_city!; end

    sig { void }
    def restore_address_street!; end

    sig { void }
    def restore_address_zipcode!; end

    sig { void }
    def restore_capital_amount_cents!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_email!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_legal_form!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_phone!; end

    sig { void }
    def restore_rcs_city!; end

    sig { void }
    def restore_rcs_number!; end

    sig { void }
    def restore_registration_number!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_vat_number!; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_address_city; end

    sig { returns(T::Boolean) }
    def saved_change_to_address_city?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_address_street; end

    sig { returns(T::Boolean) }
    def saved_change_to_address_street?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_address_zipcode; end

    sig { returns(T::Boolean) }
    def saved_change_to_address_zipcode?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_capital_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_capital_amount_cents?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_email?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_legal_form; end

    sig { returns(T::Boolean) }
    def saved_change_to_legal_form?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_phone; end

    sig { returns(T::Boolean) }
    def saved_change_to_phone?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_rcs_city; end

    sig { returns(T::Boolean) }
    def saved_change_to_rcs_city?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_rcs_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_rcs_number?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_registration_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_registration_number?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_vat_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_vat_number?; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::String) }
    def vat_number; end

    sig { params(value: ::String).returns(::String) }
    def vat_number=(value); end

    sig { returns(T::Boolean) }
    def vat_number?; end

    sig { returns(T.nilable(::String)) }
    def vat_number_before_last_save; end

    sig { returns(T.untyped) }
    def vat_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def vat_number_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def vat_number_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def vat_number_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def vat_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def vat_number_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def vat_number_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def vat_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def vat_number_previously_was; end

    sig { returns(T.nilable(::String)) }
    def vat_number_was; end

    sig { void }
    def vat_number_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_address_city?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_address_street?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_address_zipcode?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_capital_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_legal_form?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_phone?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_rcs_city?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_rcs_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_registration_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_vat_number?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def auto_entrepreneur(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eurl(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_auto_entrepreneur(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_eurl(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_sa(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_sas(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_sasu(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sa(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sas(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sasu(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig do
      params(
        blk: T.proc.params(record: ::Organization::Company).returns(BasicObject)
      ).returns(T::Array[::Organization::Company])
    end
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Organization::Company } }

    sig { returns(T::Array[::Organization::Company]) }
    def to_a; end

    sig { returns(T::Array[::Organization::Company]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Organization::Company } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Organization::Company } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Organization::Company } }

    sig do
      params(
        records: T.any(::Organization::Company, T::Enumerable[T.any(::Organization::Company, T::Enumerable[::Organization::Company])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Organization::Company, T::Enumerable[T.any(::Organization::Company, T::Enumerable[::Organization::Company])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Organization::Company, T::Enumerable[T.any(::Organization::Company, T::Enumerable[::Organization::Company])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Organization::Company]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Organization::Company, T::Enumerable[T.any(::Organization::Company, T::Enumerable[::Organization::Company])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Organization::Company, T::Enumerable[T.any(::Organization::Company, T::Enumerable[::Organization::Company])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Organization::Company, T::Enumerable[T.any(::Organization::Company, T::Enumerable[::Organization::Company])])
      ).returns(T::Array[::Organization::Company])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Organization::Company]) }
    def target; end

    sig { returns(T::Array[::Organization::Company]) }
    def to_a; end

    sig { returns(T::Array[::Organization::Company]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Organization::Company } }

    sig { returns(T::Array[::Organization::Company]) }
    def to_a; end

    sig { returns(T::Array[::Organization::Company]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Organization::Company } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Organization::Company } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
