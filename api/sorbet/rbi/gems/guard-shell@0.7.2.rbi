# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `guard-shell` gem.
# Please instead update this file by running `bin/tapioca gem guard-shell`.


# source://guard-shell//lib/guard/shell/version.rb#1
module Guard
  extend ::Guard::Internals::Helpers

  class << self
    # source://guard/2.19.1/lib/guard.rb#87
    def async_queue_add(changes); end

    # source://guard/2.19.1/lib/guard.rb#73
    def init(cmdline_options); end

    # source://guard/2.19.1/lib/guard.rb#24
    def interactor; end

    # source://guard/2.19.1/lib/guard.rb#23
    def listener; end

    # source://guard/2.19.1/lib/guard.rb#22
    def queue; end

    # source://guard/2.19.1/lib/guard.rb#44
    def setup(cmdline_options = T.unsafe(nil)); end

    # source://guard/2.19.1/lib/guard.rb#21
    def state; end

    private

    # source://guard/2.19.1/lib/guard.rb#132
    def _evaluate(options); end

    # source://guard/2.19.1/lib/guard.rb#152
    def _guardfile_deprecated_check(modified); end

    # source://guard/2.19.1/lib/guard.rb#113
    def _listener_callback; end

    # source://guard/2.19.1/lib/guard.rb#128
    def _pluginless_guardfile?; end

    # source://guard/2.19.1/lib/guard.rb#109
    def _relative_pathnames(paths); end

    # source://guard/2.19.1/lib/guard.rb#99
    def _relevant_changes?(changes); end
  end
end

# source://guard-shell//lib/guard/shell.rb#36
class Guard::Dsl
  # source://guard/2.19.1/lib/guard/dsl.rb#246
  def callback(*args, &block); end

  # source://guard/2.19.1/lib/guard/dsl.rb#408
  def clearing(on); end

  # source://guard/2.19.1/lib/guard/dsl.rb#394
  def directories(directories); end

  # Eager prints the result for stdout and stderr as it would be written when
  # running the command from the terminal. This is useful for long running
  # tasks.
  #
  # source://guard-shell//lib/guard/shell.rb#45
  def eager(command); end

  # source://guard/2.19.1/lib/guard/dsl.rb#377
  def evaluate(contents, filename, lineno); end

  # source://guard/2.19.1/lib/guard/dsl.rb#267
  def filter(*regexps); end

  # source://guard/2.19.1/lib/guard/dsl.rb#282
  def filter!(*regexps); end

  # source://guard/2.19.1/lib/guard/dsl.rb#124
  def group(*args); end

  # source://guard/2.19.1/lib/guard/dsl.rb#176
  def guard(name, options = T.unsafe(nil)); end

  # source://guard/2.19.1/lib/guard/dsl.rb#267
  def ignore(*regexps); end

  # source://guard/2.19.1/lib/guard/dsl.rb#282
  def ignore!(*regexps); end

  # source://guard/2.19.1/lib/guard/dsl.rb#91
  def interactor(options); end

  # source://guard/2.19.1/lib/guard/dsl.rb#325
  def logger(options); end

  # Easy method to display a notification
  #
  # source://guard-shell//lib/guard/shell.rb#38
  def n(msg, title = T.unsafe(nil), image = T.unsafe(nil)); end

  # source://guard/2.19.1/lib/guard/dsl.rb#76
  def notification(notifier, opts = T.unsafe(nil)); end

  # source://guard/2.19.1/lib/guard/dsl.rb#372
  def scope(scope = T.unsafe(nil)); end

  # source://guard/2.19.1/lib/guard/dsl.rb#218
  def watch(pattern, &action); end

  private

  # source://guard/2.19.1/lib/guard/dsl.rb#414
  def _cleanup_backtrace(backtrace); end
end

# source://guard-shell//lib/guard/shell.rb#5
class Guard::Shell < ::Guard::Plugin
  # source://guard-shell//lib/guard/shell.rb#30
  def available_watchers; end

  # Call #run_on_change for all files which match this guard.
  #
  # source://guard-shell//lib/guard/shell.rb#17
  def run_all; end

  # Print the result of the command(s), if there are results to be printed.
  #
  # source://guard-shell//lib/guard/shell.rb#26
  def run_on_modifications(res); end

  # Calls #run_all if the :all_on_start option is present.
  #
  # source://guard-shell//lib/guard/shell.rb#8
  def start; end

  # Defined only to make callback(:stop_begin) and callback(:stop_end) working
  #
  # source://guard-shell//lib/guard/shell.rb#13
  def stop; end
end

# source://guard-shell//lib/guard/shell/version.rb#2
module Guard::ShellVersion; end

# source://guard-shell//lib/guard/shell/version.rb#3
Guard::ShellVersion::VERSION = T.let(T.unsafe(nil), String)
