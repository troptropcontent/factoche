# Name of your application. Used to uniquely configure containers.
service: fabati-staging

# Name of the container image.
image: troptropcontent/fabati-staging

# Deploy to these servers.
servers:
  web:
    hosts:
      - 51.178.142.109
    proxy:
      host: api.staging.fabati.fr
      ssl: true
  jobs:
    hosts:
      - 51.178.142.109
    cmd: bundle exec sidekiq

ssh:
  user: ubuntu

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.

# Credentials for your image host.
registry:
  username: troptropcontent
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  clear:
    RAILS_ENV: staging
  secret:
    - RAILS_MASTER_KEY
    - HEADLESS_BROWSER_TOKEN
    - DATABASE_URL
    - REDIS_URL
    - HEADLESS_BROWSER_WS
    - PRINT_MICROSERVICE_HOST
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - POSTGRES_PASSWORD
    - ACCESS_TOKEN_SECRET
    - REFRESH_TOKEN_SECRET
    - PRINT_TOKEN_SECRET
    - SENTRY_DSN

aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
# asset_path: /rails/public/assets

# Configure the image builder.

builder:
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: ruby-3.3.6
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY
# Use a different ssh user than root
# ssh:
#   user: app

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  chromium:
    image: browserless/chrome:latest
    port: "9222:3000"
    options:
      restart: unless-stopped
    env:
      secret:
        - HEADLESS_BROWSER_TOKEN
      clear:
        CONNECTION_TIMEOUT: "-1"
        DEFAULT_LAUNCH_ARGS: '["--no-sandbox", "--disable-gpu", "--disable-dev-shm-usage"]'
    roles:
      - web
  database:
    image: postgres:17.5
    env:
      secret:
        - POSTGRES_PASSWORD
      clear:
        POSTGRES_HOST_AUTH_METHOD: trust
    roles:
      - web
    directories:
      - data:/var/lib/postgresql/data

  redis:
    image: redis:8.0
    options:
      restart: unless-stopped
    roles:
      - web
    directories:
      - data:/data
