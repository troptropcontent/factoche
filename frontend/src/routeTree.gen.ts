/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexImport } from './routes/_authenticated/index'
import { Route as AuthLoginImport } from './routes/auth/login'

// Create Virtual Routes

const AuthenticatedOrganizationCompaniesCompanyIdClientsIndexLazyImport =
  createFileRoute(
    '/_authenticated/organization/companies/$companyId/clients/',
  )()

// Create/Update Routes

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexRoute = AuthenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedOrganizationCompaniesCompanyIdClientsIndexLazyRoute =
  AuthenticatedOrganizationCompaniesCompanyIdClientsIndexLazyImport.update({
    id: '/organization/companies/$companyId/clients/',
    path: '/organization/companies/$companyId/clients/',
    getParentRoute: () => AuthenticatedRoute,
  } as any).lazy(() =>
    import(
      './routes/_authenticated/organization/companies/$companyId/clients/index.lazy'
    ).then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/organization/companies/$companyId/clients/': {
      id: '/_authenticated/organization/companies/$companyId/clients/'
      path: '/organization/companies/$companyId/clients'
      fullPath: '/organization/companies/$companyId/clients'
      preLoaderRoute: typeof AuthenticatedOrganizationCompaniesCompanyIdClientsIndexLazyImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedOrganizationCompaniesCompanyIdClientsIndexLazyRoute: typeof AuthenticatedOrganizationCompaniesCompanyIdClientsIndexLazyRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedOrganizationCompaniesCompanyIdClientsIndexLazyRoute:
    AuthenticatedOrganizationCompaniesCompanyIdClientsIndexLazyRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthenticatedRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/': typeof AuthenticatedIndexRoute
  '/organization/companies/$companyId/clients': typeof AuthenticatedOrganizationCompaniesCompanyIdClientsIndexLazyRoute
}

export interface FileRoutesByTo {
  '/auth/login': typeof AuthLoginRoute
  '/': typeof AuthenticatedIndexRoute
  '/organization/companies/$companyId/clients': typeof AuthenticatedOrganizationCompaniesCompanyIdClientsIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/organization/companies/$companyId/clients/': typeof AuthenticatedOrganizationCompaniesCompanyIdClientsIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/auth/login'
    | '/'
    | '/organization/companies/$companyId/clients'
  fileRoutesByTo: FileRoutesByTo
  to: '/auth/login' | '/' | '/organization/companies/$companyId/clients'
  id:
    | '__root__'
    | '/_authenticated'
    | '/auth/login'
    | '/_authenticated/'
    | '/_authenticated/organization/companies/$companyId/clients/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authenticated",
        "/auth/login"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/",
        "/_authenticated/organization/companies/$companyId/clients/"
      ]
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/_authenticated/": {
      "filePath": "_authenticated/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/organization/companies/$companyId/clients/": {
      "filePath": "_authenticated/organization/companies/$companyId/clients/index.lazy.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
